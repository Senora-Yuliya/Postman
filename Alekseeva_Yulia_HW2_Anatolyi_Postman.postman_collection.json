{
	"info": {
		"_postman_id": "d6c5875f-a3a4-48f5-81ae-888003bea262",
		"name": "Alekseeva_Yulia_HW2_Anatolyi_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const respSalary = pm.response.json().salary",
							"const reqSalary = +pm.request.url.query.get('salary')",
							"respSalary.forEach((salary, index) => {",
							"    pm.test(`${reqSalary} * ${index+1} === ${salary}`, () => {",
							"        pm.expect(reqSalary*(index+1)).to.eql(+salary)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Yulia&age=35&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yulia"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const reqObject = pm.request.url.query.toObject()",
							"const respObject = {",
							"    age: String(pm.response.json().age),",
							"    name: pm.response.json().name,",
							"    salary: String(pm.response.json().salary)",
							"}",
							"",
							"pm.test('Compare request object and response object', () => {",
							"    pm.expect(reqObject).to.deep.eql(respObject)",
							"})",
							"",
							"",
							"const jsonData = pm.response.json()",
							"const resp = {};",
							"for(const key in reqObject) {",
							"    resp[key] = isNaN(jsonData[key]) ? jsonData[key] : +jsonData[key]",
							"    reqObject[key] = isNaN(reqObject[key]) ? reqObject[key] : +reqObject[key]",
							"}",
							"pm.test('2.0 Compare request object and response object', () => {",
							"    pm.expect(reqObject).to.deep.eql(resp)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Yulia&age=35&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yulia"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//4.1",
							"const keyisInJson = ['start_qa_salary', 'qa_salary_after_6_months', 'qa_salary_after_12_months', 'qa_salary_after_1.5_year', 'qa_salary_after_3.5_years', 'person']",
							"let resp = pm.response.json()",
							"keyisInJson.forEach(key => {",
							"    pm.test(`Response has ${key}`, () => {",
							"        pm.expect(resp).to.have.property(key)",
							"    })",
							"})",
							"",
							"//4.2",
							"const salary = pm.environment.get('salary')",
							"const counters = {",
							"   \"start_qa_salary\": 1,",
							"    \"qa_salary_after_6_months\" : 2,",
							"    \"qa_salary_after_12_months\" : 2.7,",
							"     \"qa_salary_after_1.5_year\" : 3.3,",
							"\"qa_salary_after_3.5_years\" : 3.8",
							"}",
							"for(const key in counters) {",
							"    pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {",
							"        pm.expect(+resp[key]).to.eql(salary*counters[key])",
							"    })",
							"}",
							"",
							"//4.3",
							"counters[`person`] = ''",
							"for(const key in counters) {",
							"pm.test(`Response has ${key}`, () => {",
							"        pm.expect(resp).to.have.property(key)",
							"})",
							"if(key != 'person') {",
							"      pm.test(`${key} from response = salary from request * ${counters[key]}`, () => {",
							"        pm.expect(+resp[key]).to.eql(salary*counters[key])",
							"})",
							"}",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const age = pm.iterationData.get('age');",
							"const name = pm.iterationData.get('name');",
							"const salary = pm.iterationData.get('salary');",
							"",
							"function ageValidation(value) {",
							"    return value && !isNaN(value) && value>17 && value<121 &&  Number.isInteger(+value)",
							"}",
							"",
							"function salaryValidation(value) {",
							"return value && !isNaN(value) && value>0 && value<1000001 &&  Number.isInteger(+value)",
							"}",
							"",
							"function nameValidation(value) {",
							"    return value && value.length >2 && value.length <41 && value.trim() === value",
							"}",
							"",
							"function validate (name, age, salary) {",
							"return ageValidation(age) && salaryValidation(salary) && nameValidation(name)",
							"}",
							"",
							"if (validate(name, age, salary)) {",
							"    pm.test(`200 code with age == ${age}, salary == ${salary} and name == ${name}`, ()  => {",
							"        pm.response.to.have.status(200);",
							"    })",
							"} else {",
							"     pm.test(`NOT 200 code with age == ${age}, salary == ${salary} and name == ${name}`, ()  => {",
							"        pm.response.to.not.have.status(200);",
							"})",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}